openapi: 3.0.1
info:
  title: Temperature conversion API
  description: Temperature conversion API
  contact:
    email: bruno.botlho.br@gmail.com
  version: 1.0.3
servers:
- url: /
tags:
- name: Temperature
  description: Temperature conversion resources.
- name: House Keeping
  description: House Keeping resources.
- name: Misc
  description: Other Stuff.
paths:
  /fahrenheit/{value}/celsius:
    get:
      tags:
      - Temperature
      description: Convert from Fahrenheit to Celsius
      parameters:
      - name: value
        in: path
        description: value that will be converted
        required: true
        schema:
          type: number
      responses:
        200:
          description: Conversion result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/temperature'
        400:
          description: Bad Input Parameter
          content: {}
  /celsius/{value}/fahrenheit:
    get:
      tags:
      - Temperature
      description: Convert from Celsius to Fahrenheit
      parameters:
      - name: value
        in: path
        description: value that will be converted
        required: true
        schema:
          type: number
      responses:
        200:
          description: Conversion result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/temperature'
        400:
          description: Bad Input Parameter
          content: {}
  /ready:
    get:
      tags:
      - House Keeping
      description: Is the Node ready to operate? It retuns yes if it is OK.
      responses:
        200:
          description: ready
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ready'
        500:
          description: No ready yet
          content: {}
  /health:
    get:
      tags:
      - House Keeping
      description: Is the Node health to operate? It retuns yes if it is OK.
      responses:
        200:
          description: Node is health
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ready'
        500:
          description: Node isn't health
          content: {}
  /unhealth:
    put:
      tags:
      - House Keeping
      description: It makes the node unhealth
      responses:
        200:
          description: Node isn't health
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ready'
        500:
          description: It wasn't possible change the Node status
          content: {}
  /unreadyfor/{time}:
    put:
      tags:
      - House Keeping
      description: It makes the node unready for X seconds
      parameters:
      - name: time
        in: path
        description: Time in Seconds
        required: true
        schema:
          type: string
      responses:
        200:
          description: Node isn't health for the requested amount of time
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ready'
        500:
          description: It wasn't possible change the Node health status
          content: {}
  /stress/{resource}/time/{time}/interval/{interval}/cycles/{cycles}:
    put:
      tags:
      - House Keeping
      description: Used to create scheduled stress tests on a given target. Use cases
        include testing program performance under max CPU or Memory load, testing
        recovery from max load, and testing virtual autoscaling features such as the
        Kubernetes horizontal pod autoscaler.
      parameters:
      - name: resource
        in: path
        description: The type of resource to stress (memory | cpu)
        required: true
        schema:
          type: string
      - name: time
        in: path
        description: The length of the stress period in seconds
        required: true
        schema:
          type: number
      - name: interval
        in: path
        description: he length of the relief period in seconds
        required: true
        schema:
          type: number
      - name: cycles
        in: path
        description: The number of cycles to complete before NodeHog exits (1 cycle
          = 1 lifespan + 1 deathspan)
        required: true
        schema:
          type: number
      responses:
        200:
          description: Retorno
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/status'
        400:
          description: Bad Input Parameter
          content: {}
  /echo/{msg}:
    get:
      tags:
      - Misc
      description: Return a message
      parameters:
      - name: msg
        in: path
        description: Message
        required: true
        schema:
          type: string
      responses:
        200:
          description: Message
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/msg'
        400:
          description: Bad Input Parameter
          content: {}
  /secret/{secret}:
    get:
      tags:
      - Misc
      description: Answer yes, if you get the secret right.
      parameters:
      - name: secret
        in: path
        description: Secret Word
        required: true
        schema:
          type: string
      responses:
        200:
          description: Sucess, you know the secret
          content: {}
        400:
          description: Fail, you don't know the secret
          content: {}
components:
  schemas:
    temperature:
      required:
      - value
      type: object
      properties:
        value:
          type: number
          example: 500.0
    ready:
      type: object
      properties:
        value:
          type: string
          example: yes
    msg:
      type: object
      properties:
        value:
          type: string
          example: Azeitona
    status:
      type: object
      properties:
        value:
          type: string
          example: Mission Accomplished
    resource:
      type: object
      properties:
        value:
          type: string
          example: cpu
    time:
      type: object
      properties:
        value:
          type: number
          example: 20.0
    interval:
      type: object
      properties:
        value:
          type: number
          example: 1.0
    cycles:
      type: object
      properties:
        value:
          type: number
          example: 2.0
